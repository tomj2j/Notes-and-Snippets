// arrays

let ninjas = ["shaun", "ryu", "chun-li"];

// ninjas[1] = 'ken';
// console.log(ninjas[1]);

// let ages = [20, 25, 30, 35];
// console.log(ages[2]);

// let random = ['shaun', 'crystal', 30, 20];

// array length
// console.log(ninjas.length);

// array methods

// let result = ninjas.join(',');
// let result = ninjas.indexOf('chun-li');
// let result = ninjas.concat(['ken', 'crystal']);
let result = ninjas.push("ken");
let result = ninjas.pop();

console.log(result);
console.log(ninjas);



<<FILTER ARRAYS>>
const scores = [10, 30, 15, 25, 50, 40, 5];

const filteredScores = scores.filter((score) => {
  return score > 20;
});
console.log(filteredScores);
    
    <<Variant>>
    
const users = [
  { name: "shaun", premium: true },
  { name: "yoshi", premium: false },
  { name: "mario", premium: false },
  { name: "chin-li", premium: true },
];

/* const premiumUsers = users.filter((user) => {
  return user.premium;
}); */
const nonPremiumUsers = users.filter((user) => !user.premium);
console.log(nonPremiumUsers);


<<MAP METHOD>>

const prices = [10, 30, 15, 25, 50, 40, 5];
const salePrices = prices.map((price) => price / 2);
console.log(salePrices);

<<create new Object>>

const products = [
  { name: "gold star", price: 20 },
  { name: "mushroom", price: 40 },
  { name: "green shells", price: 30 },
  { name: "banana skins", price: 10 },
  { name: "red shells", price: 50 },
];

const saleProducts = products.map(product => {
  if (product.price > 30) {
    return { name: product.name, price: product.price / 2 };
  } else {
    return product;
  }
});
console.log(saleProducts);



<<REDUCING>>

const scores = [10, 20, 60, 40, 70, 90, 30];

//acc - accumulator remembers the value, curr - current
const result = scores.reduce((acc, curr) => {
  if (curr > 50) {
    acc++;
  }
  return acc;
}, 0);

console.log(result);


<< use reduce to sum up values >>

const scores = [
  { player: "mario", score: 50 },
  { player: "yoshi", score: 30 },
  { player: "mario", score: 70 },
  { player: "chin-li", score: 60 },
  { player: "mario", score: 50 },
  { player: "yoshi", score: 30 },
  { player: "mario", score: 70 },
  { player: "chin-li", score: 60 },
  { player: "mario", score: 50 },
  { player: "yoshi", score: 30 },
  { player: "mario", score: 70 },
  { player: "chin-li", score: 60 },
  { player: "mario", score: 50 },
  { player: "yoshi", score: 30 },
  { player: "mario", score: 70 },
  { player: "chin-li", score: 60 },
];

const marioTotal = scores.reduce((acc, curr) => {
  if (curr.player == "mario") {
    acc += curr.score;
  }
  return acc;
}, 0);

console.log(marioTotal);


<<FIND>>

    Stops searching when it first find a suitible value(here 60)

const scores = [10, 5, 0, 40, 60, 10, 20, 70];

const firstHighScore = scores.find((score) => {
  return score > 50;
});

console.log(firstHighScore);


/shrinked
const firstHighScore = scores.find(score => score > 50);


>> SORT <<

//example1
const names = ["mario", "shaun", "chun-li", "yoshi", "luigi", "albert"];

names.sort();
names.reverse();
//destructive
console.log(names);

//example2
const scores = [10, 50, 20, 5, 35, 70, 45];

scores.sort();
scores.reverse();
console.log(scores);
//result-> [10, 20, 35, 45, 5, 50, 70] the 5 is wrong.

scores.sort((a, b) => b - a);
console.log(scores);
//result -> [70, 50, 45, 35, 20, 10, 5] CORRECT :)

//example3
const players = [
  { name: "mario", score: 20 },
  { name: "luigi", score: 10 },
  { name: "chin-li", score: 50 },
  { name: "yoshi", score: 30 },
  { name: "shaun", score: 70 },
];

//players.sort(); // wont work

players.sort((a, b) => {
  if (a.score > b.score) {
    return -1;
  } else if (b.score > a.score) {
    return 1;
  } else {
    return 0;
  }
});

//SHORT VERSION
players.sort((a, b) => b.score - a.score);
players.reverse();

console.log(players);



<<CHAIN ARRAY METHOD >>


const products = [
  { name: "gold star", price: 30 },
  { name: "mushroom", price: 50 },
  { name: "green shells", price: 10 },
  { name: "banana skins", price: 5 },
  { name: "red shells", price: 40 },
];

/* const filtered = products.filter((product) => product.price > 20);
console.log(filtered);

const promos = filtered.map((product) => {
  return `the ${product.name} is ${product.price / 2} pounds`;
}); */

//SHORTER VERSION
const promos = products
  .filter((product) => product.price > 20)
  .map((product) => `the ${product.name} is ${product.price / 2} pounds`);

console.log(promos);
